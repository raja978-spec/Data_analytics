https://www.geeksforgeeks.org/pandas-interview-questions/

1. What is pandas?
Package helps to do data manipulation, analysis, cleaning.
handling missing values in fast manner.
Built on top of numpy

2. What are the Different Types of Data Structures in Pandas?
Series - 1D labelled array can hold any data type.
DF - 2D tabular form data, has row, columns 

3. List Key Features of Pandas.
Easy handling missing values
Integrated with numpy
Reshape of data is Easy
Has group by functions

4. What is series.
A Series in Pandas is a one-dimensional labelled array, can hold any 
data types, A series can be created from a Python tuple, list and dictionary.

5. What are the Different Ways to Create a Series?
* Creating a Series from an Array
* Creating a Series from an Array with a custom Index
* Creating a Series from Dictionary
 dict = {'Geeks': 10,
  'for': 20,
  'geeks': 30}
  # create series from dictionary
  print(pd.Series(dict))
OUTPUT:
Geeks    10
for      20
geeks    30
dtype: int64
* Creating a Series using NumPy Functions
# series with numpy linspace()
  ser1 = pd.Series(np.linspace(3, 33, 3))
  print(ser1)
# series with numpy linspace()
ser2 = pd.Series(np.random.randn(3))
print("\n", ser2)
OUTPUT:
0     3.0
1    18.0
2    33.0
dtype: float64
 0    0.694519
1    0.782243
2    0.082820
dtype: float64

7.How can we Create a Copy of the Series?
shallow - ser.copy(deep=False)
deep - ser.copy(deep=True)

8.What is a DataFrame in Pandas?
Ans: A DataFrame in Panda is a data structure used to store the data in tabular form, 
that is in the form of rows and columns. It is two-dimensional, size-mutable, 
and heterogeneous in nature. The main components of a dataframe are data, rows, 
and columns. A dataframe can be created by loading the dataset from existing 
storage, such as SQL database, CSV file, Excel file, etc.

9. What are the Different ways to Create a DataFrame in Pandas?
Creating a DataFrame using a List
Creating a DataFrame using a List of Lists
# import pandas as pd
  import pandas as pd

  # list of strings
  lst = [[1, 'Geeks'], [2, 'For'], [3, 'Geeks']]

  # Calling DataFrame constructor
  # on list with column names
  print(pd.DataFrame(lst, columns=['Id', 'Data']))
  Output:

   Id   Data
0   1  Geeks
1   2    For
2   3  Geeks
Creating a DataFrame using a Dictionary
Creating a DataFrame using a List of Dictionaries
# import pandas as pd
  import pandas as pd

  # list of strings
  lst = [{1: 'Geeks', 2: 'For', 3: 'Geeks'},
  {1: 'Portal', 2: 'for', 3: 'Geeks'}]

  # Calling DataFrame constructor on list
  print(pd.DataFrame(lst))
  Output:

        1    2      3
0   Geeks  For  Geeks
1  Portal  for  Geeks

9. How to Read Data into a DataFrame from a CSV file?
Ans: We can create a data frame from a CSV file - 
"Comma Separated Values". This can be done by using the 
read_csv() method which takes the csv file as the parameter.
pandas.read_csv(file_name)
Another way to do this is by using the read_table() 
method which takes the CSV file and a delimiter value 
as the parameter.
pandas.read_table(file_name, delimiter)

10. How to access the first few rows of a dataframe?
Ans: The first few records of a dataframe can be accessed by 
using the pandas head() method. It takes one optional argument 
n, which is the number of rows. By default, it returns the first 
5 rows of the dataframe. 
The head() method has the following syntax:
df.head(n)
Another way to do it is by using iloc() method. 
It is similar to the Python list-slicing technique. 
It has the following syntax:
df.iloc[:n]

11. What is Reindexing in Pandas?
Ans: Reindexing in Pandas as the name suggests means changing the 
index of the rows and columns of a dataframe. It can be done by 
using the Pandas reindex() method. In case of missing values or 
new values that are not present in the dataframe, the reindex() 
method assigns it as NaN.
df.reindex(new_index)

12. How to Select a Single Column of a DataFrame?
Ans: There are many ways to Select a single column of a dataframe. They are as follows:
By using the Dot operator, we can access any column of a dataframe.
Dataframe.column_name
Another way to select a column is by using the square brackets [].
DataFrame[column_name]