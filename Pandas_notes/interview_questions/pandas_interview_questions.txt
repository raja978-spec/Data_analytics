https://www.geeksforgeeks.org/pandas-interview-questions/

1. What is pandas?
Package helps to do data manipulation, analysis, cleaning.
handling missing values in fast manner.
Built on top of numpy

2. What are the Different Types of Data Structures in Pandas?
Series - 1D labelled array can hold any data type.
DF - 2D tabular form data, has row, columns 

3. List Key Features of Pandas.
Easy handling missing values
Integrated with numpy
Reshape of data is Easy
Has group by functions

4. What is series.
A Series in Pandas is a one-dimensional labelled array, can hold any 
data types, A series can be created from a Python tuple, list and dictionary.

5. What are the Different Ways to Create a Series?
* Creating a Series from an Array
* Creating a Series from an Array with a custom Index
* Creating a Series from Dictionary
 dict = {'Geeks': 10,
  'for': 20,
  'geeks': 30}
  # create series from dictionary
  print(pd.Series(dict))
OUTPUT:
Geeks    10
for      20
geeks    30
dtype: int64
* Creating a Series using NumPy Functions
# series with numpy linspace()
  ser1 = pd.Series(np.linspace(3, 33, 3))
  print(ser1)
# series with numpy linspace()
ser2 = pd.Series(np.random.randn(3))
print("\n", ser2)
OUTPUT:
0     3.0
1    18.0
2    33.0
dtype: float64
 0    0.694519
1    0.782243
2    0.082820
dtype: float64

7.How can we Create a Copy of the Series?
shallow - ser.copy(deep=False)
deep - ser.copy(deep=True)

8.What is a DataFrame in Pandas?
Ans: A DataFrame in Panda is a data structure used to store the data in tabular form, 
that is in the form of rows and columns. It is two-dimensional, size-mutable, 
and heterogeneous in nature. The main components of a dataframe are data, rows, 
and columns. A dataframe can be created by loading the dataset from existing 
storage, such as SQL database, CSV file, Excel file, etc.

9. What are the Different ways to Create a DataFrame in Pandas?
Creating a DataFrame using a List
Creating a DataFrame using a List of Lists
# import pandas as pd
  import pandas as pd

  # list of strings
  lst = [[1, 'Geeks'], [2, 'For'], [3, 'Geeks']]

  # Calling DataFrame constructor
  # on list with column names
  print(pd.DataFrame(lst, columns=['Id', 'Data']))
  Output:

   Id   Data
0   1  Geeks
1   2    For
2   3  Geeks
Creating a DataFrame using a Dictionary
Creating a DataFrame using a List of Dictionaries
# import pandas as pd
  import pandas as pd

  # list of strings
  lst = [{1: 'Geeks', 2: 'For', 3: 'Geeks'},
  {1: 'Portal', 2: 'for', 3: 'Geeks'}]

  # Calling DataFrame constructor on list
  print(pd.DataFrame(lst))
  Output:

        1    2      3
0   Geeks  For  Geeks
1  Portal  for  Geeks

9. How to Read Data into a DataFrame from a CSV file?
Ans: We can create a data frame from a CSV file - 
"Comma Separated Values". This can be done by using the 
read_csv() method which takes the csv file as the parameter.
pandas.read_csv(file_name)
Another way to do this is by using the read_table() 
method which takes the CSV file and a delimiter value 
as the parameter.
pandas.read_table(file_name, delimiter)

10. How to access the first few rows of a dataframe?
Ans: The first few records of a dataframe can be accessed by 
using the pandas head() method. It takes one optional argument 
n, which is the number of rows. By default, it returns the first 
5 rows of the dataframe. 
The head() method has the following syntax:
df.head(n)
Another way to do it is by using iloc() method. 
It is similar to the Python list-slicing technique. 
It has the following syntax:
df.iloc[:n]

11. What is Reindexing in Pandas?
üîÅ reindex() in pandas is used to:
Change the order of rows or columns
Add new rows or columns (which will have NaN if not present in original)
Align data to a new index
df.reindex(labels=new_index_list or 
existing_index_list_to_reorder
, columns=new_column_list or existing_column_list_to_reorder)
EX:
import numpy as np
import pandas as pd
ss=['y','n','y','n','n','y','y','n','n','y']
exam_data={
    'name':['a','a','s','r','l','m','r','k','b','c'],
    'score':[15.5,9,16.5,np.nan,9,50,17,np.nan,8,20],
    'attempts':[1,3,2,3,2,3,1,1,2,1],
    'qualify':['y','n','y','n','n','y','y','n','n','y']
}
labels = ["A","B",'C','D','E','F','G','H','I','J']

df = pd.DataFrame(exam_data,index=labels)
df=df.reindex(columns=['score','qualify','new_column'],
              labels=['A','B','new_row'])
print(df)
OUTPUT:
         score qualify  new_column
A         15.5       y         NaN
B          9.0       n         NaN
new_row    NaN     NaN         NaN


12. How to Select a Single Column of a DataFrame?
Ans: There are many ways to Select a single column of a dataframe. They are as follows:
By using the Dot operator, we can access any column of a dataframe.
Dataframe.column_name
Another way to select a column is by using the square brackets [].
DataFrame[column_name]

13. How to Rename a Column in a DataFrame?
Ans: A column of the dataframe can be renamed by using the rename() 
function. We can rename a single as well as multiple columns at the 
same time using this method.
DataFrame.rename(columns={'column1': 'COLUMN_1', 
'column2':'COLUMN_2'}, inplace=True)
Another way is by using the set_axis() function which takes the 
new column name and axis to be replaced with the new name.
DataFrame.set_axis(labels=['COLUMN_1','COLUMN_2'], axis=1, inplace=True)
In case we want to add a prefix or suffix to the column names, 
we can use the add_prefix() or add_suffix() methods.
DataFrame.add_prefix(prefix='PREFIX_')
DataFrame.add_suffix(suffix='_suffix')

14. How to add an Index, Row, or Column to an Existing Dataframe?
Ans: Adding Index
We can add an index to an existing dataframe by using the Pandas 
set_index() method which is used to set a list, series, or 
dataframe as the index of a dataframe. The set_index() method 
has the following syntax:
df.set_index(keys, drop=True, 
append=False, inplace=False, 
verify_integrity=False)
Adding Rows
The df.loc[] is used to access a group of rows or columns 
and can be used to add a row to a dataframe.
DataFrame.loc[Row_Index]=new_row
We can also add multiple rows in a dataframe by using 
pandas.concat() function which takes a list of dataframes 
to be added together.
pandas.concat([Dataframe1,Dataframe2])
Adding Columns
We can add a column to an existing dataframe by 
just declaring the column name and the list or 
dictionary of values.
DataFrame[data] = list_of_values
Another way to add a column is by using df.insert() 
method which take a value where the column should be added, 
column name and the value of the column as parameters.
DataFrameName.insert(col_index, col_name, value)
We can also add a column to a dataframe by using df.assign() function
DataFrame.assign(**kwargs)

Q15. How to Delete an Index, Row, or Column from an Existing DataFrame?
Ans: We can delete a row or a column from a dataframe by using 
df.drop() method. and provide the row or column name as the parameter.
To delete a column
DataFrame.drop(['Column_Name'], axis=1)
To delete a row
DataFrame.drop([Row_Index_Number], axis=0)

Q16. How to set the Index in a Panda dataFrame?
Ans: We can set the index to a Pandas dataframe by using the 
set_index() method, which is used to set a list, series, 
or dataframe as the index of a dataframe.
DataFrame.set_index('Column_Name')
import pandas as pd
data = pd.DataFrame({'x':[1,2,5,6,2],'y':[1,2,7,4,2],'z':['hi','j','l','l','o']})
data =data.set_index('z') # returns new set indexed df
print(data)
OUTPUT:
    x  y
z
hi  1  1
j   2  2
l   5  7
l   6  4
o   2  2

17. How to reset index in pandas dataFrame?
The index of Pandas dataframes can be reset by using the reset_index() 
method. It can be used to simply reset the index to the default integer 
index beginning at 0.
In Pandas, reset_index() method is used to reset the index of a 
DataFrame. By default, it creates a new integer-based index starting 
from 0, making the DataFrame easier to work with in various scenarios, 
especially after performing operations like filtering, grouping or 
multi-level indexing.

18. How to Find the Correlation Using Pandas?
Ans: Pandas dataframe.corr() method is used to find the 
correlation of all the columns of a dataframe. 
It automatically ignores any missing or non-numerical values.
DataFrame.corr()

19. How to Iterate over Dataframe in Pandas?
Using iter tuple and row we can iterate over df data 
EX:
import pandas as pd
data = pd.DataFrame(
    {'x':['hello','hellohi','goodmorninghishelo'],
     'y':['hello','hellohi','goodmorninghishelo']
     }
    )
for i in data.itertuples(): # Retrieves data with index
    print(i)

for i in data.iterrows(): # Returns iterators as tuple
    print(i)

OUTPUT:
Pandas(Index=0, x='hello', y='hello')
Pandas(Index=1, x='hellohi', y='hellohi')
Pandas(Index=2, x='goodmorninghishelo', y='goodmorninghishelo')
(0, x    hello
y    hello
Name: 0, dtype: object)
(1, x    hellohi
y    hellohi
Name: 1, dtype: object)
(2, x    goodmorninghishelo
y    goodmorninghishelo
Name: 2, dtype: object)

20. What are the Important Conditions Before Iterating Over a Pandas DataFrame?
Avoid iteration when possible‚ÄîPandas offers built-in functions that are 
faster and more efficient.
Use to_string() for displaying the DataFrame in a readable 
tabular format instead of looping.
For better performance, prefer vectorized operations over iteration.
Use apply() when applying a function to selected rows, as it's more 
efficient than looping through each row.

21.What is Categorical Data and How it is represented in Pandas?
Ans: Categorical data is a set of predefined data values under some 
categories. It usually has a limited and fixed range of possible 
values and can be either numerical or textual in nature. 
A few examples of categorical data are gender, educational 
qualifications, blood type, country affiliation, observatio
n time, etc. In Pandas categorical data is often represented 
by Object datatype.

22. How can a DataFrame be Converted to an Excel File?
Ans: A Pandas dataframe can be converted to an Excel file by 
using the to_excel() function which takes the file name as the 
parameter. We can also specify the sheet name in this function.
DataFrame.to_excel(file_name)