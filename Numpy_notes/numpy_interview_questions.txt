https://www.geeksforgeeks.org/numpy-interview-questions/

1. What is numpy?
* A package used to do numerical calculation on N dim
  array.
* Used for machine leaning, data science areas
* It supports array, matrices and variety.

2. How do i create a numpy array?
Using 
*np.array()
*np.zero(shape, dtype) and oness
*np.full(shape=(4,4), fill_value=[i for i in range(2*2)])
OUTPUT:
[[0 1 2 3]
 [0 1 2 3]
 [0 1 2 3]
 [0 1 2 3]]
* np.arange(start=1, stop=10, step=2)
OUTPUT: [1 2 3 4 5 6 7 8 9]
* np.linspace(start=[1,2,3],stop=[4,5,6],num=3)
OUTPUT:
[[1.  2.  3. ]
 [2.5 3.5 4.5]
 [4.  5.  6. ]]

3. What are the main features of Numpy?
* Memory management
* Board casting
* supports multi dimensional array
* Has indexing and slicing

4. How do you calculate the dot product of two NumPy arrays?
Using numpy.dot(a,b) function
Using the @ operator
a @ b
a: The first input array (NumPy array).
b: The second input array (NumPy array).
Both methods will return the dot product of the 
two arrays as a scalar value.

5. How do I access elements in a NumPy array?
In NumPy, we can access elements in an array by indexing and slicing.
And by boolean indexing: helps to select elements with condition

6.What is the difference between a shallow copy and a deep copy in NumPy?
shallow - shared same data with same address space, so the data is not
          duplicate. So changes made in one will reflected on other one
deep - Completely new copy in new memory space, so changes made in 
       this will not be reflected to original one.

7. How do you reshape a NumPy array?
We can reshape a NumPy array by using the reshape() 
method or the np.reshape() function. it help us to change 
the dimensions of the array and keep all the elements constant.
Using the reshape() method:
array1= original_array.reshape(new_shape)
Using the np.reshape() function:
array1 = np.reshape(original_array, new_shape)
In both cases, original_array is the existing NumPy array you want 
to reshape, and new_shape is a tuple specifying the desired shape of the new array.

8. How to perform element-wise operations on NumPy arrays?
To perform element-wise operations on NumPy arrays, you can use 
standard arithmetic operators.NumPy automatically applies these 
operations element-wise when you use them with arrays of the same 
shape.

9. Define the var function in NumPy.
In NumPy, the var function is used to compute the variance of 
elements in an array or along a specified axis. Variance is a 
measure of the spread or dispersion of data points.
np.var(a, axis=None, dtype=None)
a: The input array for which you want to calculate the variance.
axis: Axis or axes along which the variance is computed. 
If not specified, the variance is calculated for the whole array. 
It can be an integer or a tuple of integers to specify multiple axes.
dtype: The data type for the returned variance. 
If not specified, the data type is inferred from the 
input array.

10. Define the min and max function in NumPy.
In NumPy, you can use the min() and max() functions to find 
the minimum and maximum values in a NumPy array, respectively.
np.min(a, axis=None)
np.max(a, axis=None)

11. How to generate random numbers with NumPy?
NumPy provides a wide range of functions for generating random numbers. 
You can generate random numbers from various probability distributions, 
set seeds for reproducibility, and more. Here are some common ways to 
generate random numbers with NumPy:
Using np.random.rand()
Generating a Random Float between 0 and 1 using np.random.rand()
random_float = np.random.rand()
Using np.random.randint()
Generating a Random Integer within a Range using np.random.randint().
random_integer = np.random.randint()
Using np.random.randn()
Using np.random.seed()
We can set a seed using np.random.seed() to ensure that the generated random numbers are reproducible.
np.random.seed(seed_value)

12. What is the purpose of NumPy in Python?
NumPy (Numerical Python) is a fundamental library in 
Python for scientific computing and data analysis. it is 
the main purpose for providing support for large and 
multi-dimensional arrays and matrices.

13. How can you create a NumPy array from a Python list?
We can create a NumPy array from a Python list using the np.array() constructor provided by NumPy.
python_list = [1, 2, 3, 4, 5]
# Convert the Python list to a NumPy array
numpy_array = np.array(python_list)

Q.14 How can you access elements in a NumPy array based on specific conditions?
We can access elements in a NumPy array based on specific conditions
using boolean indexing. Boolean indexing allows us to create true and 
false values based on a condition.
arr = np.array([1, 2, 3, 4, 5])
# Define a condition (boolean mask)
condition = (arr > some_value)  
# Use the condition to access elements
selected_elements = arr[condition]

15. What are some common data types supported by NumPy?
In NumPy there are so many data types that are used to specify 
the type of data which stored in array. This data 
type provide control that how data stored in memory 
during operations.Some common data types supported by NumPy 
include:
int
float
complex
bool
object
datetime

16. How can you concatenate two NumPy arrays vertically?
We can concatenate two NumPy arrays vertically (along the rows) 
using the np.vstack() function or the np.concatenate() function 
with the axis parameter set to 0. Here's how to do it with 
both methods:

17. What is the significance of the random module in NumPy?
Here's a brief explanation of the significance of the random 
module in Python:
Random Number Generation
Random Sequences
Probability Distributions
Random Choices